<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1493267464078">{:repl-history {:ide [], :local [&quot;(slurp \&quot;street_signs.csv\&quot;)&quot; &quot;(def f me)&quot; &quot;(def f (slurp \&quot;street_signs.csv\&quot;))&quot; &quot;(ffirst f)&quot; &quot;(take 2 f)&quot; &quot;(\&quot;Description\&quot; (first f))&quot; &quot;(get \&quot;Description\&quot; (first f))&quot; &quot;(get (first f) \&quot;Description\&quot; )&quot; &quot;(clojure.xml/parse (get (first f) \&quot;Description\&quot;))&quot; &quot;(def f (parse-csv (slurp \&quot;street_signs.csv\&quot;)))&quot; &quot;(def l (first f))&quot; &quot;(get l \&quot;Description\&quot;)&quot; &quot;(hickory.core/parse-fragment (hickory.core/parse (get l \&quot;Description\&quot;)))&quot; &quot;(hickory.core/as-hiccup (hickory.core/parse (get l \&quot;Description\&quot;)))&quot; &quot;(hickory.core/as-hickory (hickory.core/parse (get l \&quot;Description\&quot;)))&quot; &quot;((hickory.core/parse-fragment (get l \&quot;Description\&quot;)))&quot; &quot;f&quot; &quot;(first f)&quot; &quot;(hickory.core/parse-fragment (get l \&quot;Description\&quot;))&quot; &quot;(hickory.core/parse (get l \&quot;Description\&quot;))&quot; &quot;(map hickory.core/as-hiccup (hickory.core/parse-fragment (get l \&quot;Description\&quot;)))&quot; &quot;(count (map hickory.core/as-hiccup (hickory.core/parse-fragment (get l \&quot;Description\&quot;))))&quot; &quot;(last (count (map hickory.core/as-hiccup (hickory.core/parse-fragment (get l \&quot;Description\&quot;)))))&quot; &quot;((count (map hickory.core/as-hiccup (hickory.core/parse-fragment (get l \&quot;Description\&quot;)))))&quot; &quot;(ffirst (map hickory.core/as-hiccup (hickory.core/parse-fragment (get l \&quot;Description\&quot;))))&quot; &quot;(last (map hickory.core/as-hiccup (hickory.core/parse-fragment (get l \&quot;Description\&quot;))))&quot; &quot;(last (extract-object l))&quot; &quot;(count (extract-object l))&quot; &quot;(last (last (extract-object l)))&quot; &quot;(last (last (last (extract-object l))))&quot; &quot;(last (last (last (last (extract-object l)))))&quot; &quot;(last (last (last (last (last (extract-object l))))))&quot; &quot;(last (last (last (last (last (last (extract-object l)))))))&quot; &quot;(fist (last (last (last (last (last (extract-object l)))))))&quot; &quot;(first (last (last (last (last (last (extract-object l)))))))&quot; &quot;(ffirst (last (last (last (last (last (extract-object l)))))))&quot; &quot;(map println (last (last (last (last (last (extract-object l)))))))&quot; &quot;(hs/select (extract-object l))&quot; &quot;(first (extract-object l))&quot; &quot;(hickory/as-hiccup (extract-object l))&quot; &quot;(hickory/as-hickory (extract-object l))&quot; &quot;(:contnet (hickory/as-hickory (extract-object l)))&quot; &quot;(:content (hickory/as-hickory (extract-object l)))&quot; &quot;(hs/select (hs/child (hs/tag :table)) (hickory/as-hickory (extract-object l)))&quot; &quot;(first (hs/select (hs/child (hs/tag :table) (hs/tag :td) (hickory/as-hickory (extract-object l)))))&quot; &quot;(first (hs/select (hs/child (hs/tag :table) (hs/tag :td))) (hickory/as-hickory (extract-object l)))&quot; &quot;(first (hs/select (hs/child (hs/tag :td)) (hickory/as-hickory (extract-object l))))&quot; &quot;(first (hs/select (hs/child (hs/tag :table) (hs/tag :td)) (hickory/as-hickory (extract-object l))))&quot; &quot;(hs/select (hs/child (hs/tag :td)) (hickory/as-hickory (extract-object l)))&quot; &quot;(count (hs/select (hs/child (hs/tag :td)) (hickory/as-hickory (extract-object l))))&quot; &quot;(drop 2 (hs/select (hs/child (hs/tag :td)) (hickory/as-hickory (extract-object l))))&quot; &quot;(extract-object l)&quot; &quot;(extract-table l)&quot; &quot;(get-field (first (first (partition-field-with-value (extract-table l)))))&quot; &quot;(first (first (partition-field-with-value (extract-table l))))&quot; &quot;\n(first (partition-field-with-value (extract-table l)))&quot; &quot;(link-kv (first (partition-field-with-value (extract-table l))))&quot; &quot;(first (partition-field-with-value (extract-table l)))&quot; &quot;((partition-field-with-value (extract-table l)))&quot; &quot;(partition-field-with-value (extract-table l))&quot; &quot;(get (build-object (partition-field-with-value (extract-table l))) \&quot;SIGN_DIR4\&quot;)&quot; &quot;(nil? (get (build-object (partition-field-with-value (extract-table l))) \&quot;SIGN_DIR4\&quot;))&quot; &quot;(build-object (partition-field-with-value (extract-table l)))&quot; &quot;l&quot; &quot;(build-object l)&quot; &quot;(doseq (build-object l))&quot; &quot;(count f)&quot; &quot;(map build-object f)&quot; &quot;(map \&quot;SIGN_FACE1\&quot; objs)&quot; &quot;(count (objs f))&quot; &quot;(count objs)&quot; &quot;(frequencies (map \&quot;Name\&quot; objs))&quot; &quot;(frequencies (map #(get % \&quot;Name\&quot;) objs))&quot; &quot;(frequencies (map #(get % \&quot;SIGN_FACE1\&quot;) objs))&quot; &quot;(first objs)&quot; &quot;(frequencies (map #(get % \&quot;INSTL_TYPE\&quot;) objs))&quot; &quot;(count (map #(get % \&quot;GISOBJID\&quot;) objs))&quot;], :remote []}}</component>
</project>